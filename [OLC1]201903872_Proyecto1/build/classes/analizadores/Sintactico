    package analizadores; 
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.HOJA;
import Estructuras.AFD;
import java.util.ArrayList;

parser code 
{:
    public Map<String, String> CONJ = new HashMap<>();  
    public Map<String, String> CONJ_EXP = new HashMap<>();
    List<String[]> Validacion = new ArrayList<>();
    public int identificador = 1;
    public Map<String, AFD> LIST_AFD = new HashMap<>();

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    
    public Map<String, AFD> getAFD(){
        return LIST_AFD;
    }
:} 

terminal String PTCOMA, LLAVEIZ, LLAVEDER, MENOR, COMA;
terminal String DISYUN, INTERR, MAS, GUION, POR, SEP, PT;
terminal String ESPECIAL;
terminal String FIN;
terminal String CONJ;
terminal String DOSPT;
terminal String LETRA;
terminal String ESPACIO;
terminal String SIGNO;
terminal String DIGITO, PARRAF;

non terminal ini;
non terminal Operaciones;
non terminal Operacion;
non terminal String ALFABETO;
non terminal String NOMBRE;
non terminal String NOMBRE2;
non terminal HOJA EXPRESION;
non terminal HOJA EXPRESIONM;
non terminal String ENTRADA;
non terminal String CARACTER;
non terminal String NOTACION;
non terminal String NOTACION2;

precedence left MAS, POR, PT, INTERR, DISYUN;

start with ini; 

ini::= 
    LLAVEIZ Operaciones FIN FIN ENTRADA LLAVEDER
 |  LLAVEIZ Operaciones FIN FIN LLAVEDER
 |  error FIN
;

Operaciones ::=
   Operacion Operaciones
 | Operacion 
 | error Operaciones
 
; 

Operacion ::=
    CONJ DOSPT NOMBRE:a GUION MENOR NOTACION:b PTCOMA       {:
                                                                if(CONJ.get(a) == null){
                                                                    CONJ.put(a,b);
                                                                }else{System.out.println("CONJ repetido");}
                                                                System.out.println("Conjunto: "+a+" con notación: "+b+" fue creado con exito" );
                                                            :}
 |  NOMBRE:a GUION MENOR EXPRESION:b PTCOMA               {:LIST_AFD.put(a,new AFD(new HOJA(".", b , new HOJA("#", null, null, "hoja"), "."), a, CONJ_EXP)); CONJ_EXP.clear(); System.out.println("Expresion: "+a+" con la notación: "+b+" fue creada con exito");:}
 |  error PTCOMA
;
EXPRESION::=
    POR ALFABETO:a                              {:RESULT = new HOJA("*",new HOJA(a, null, null, "hoja"),null,"*");System.out.println("simbolo * izquierda:"+a);:}
 |  POR EXPRESIONM:a                            {:RESULT = new HOJA("*", a ,null,"*");System.out.println("simbolo * izquierda:"+a);:}
 |  PT ALFABETO:a EXPRESION:b                   {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"),b,".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a ALFABETO:b                   {:RESULT = new HOJA(".",a,new HOJA(b, null, null, "hoja"),".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT ALFABETO:a ALFABETO:b                    {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"),new HOJA(b, null, null, "hoja"),".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a EXPRESION:b                  {:RESULT = new HOJA(".", a, b,".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a ALFABETO:b                {:RESULT = new HOJA("|",new HOJA(a, null, null, "hoja"),new HOJA(b, null, null, "hoja"),"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a EXPRESION:b               {:RESULT = new HOJA("|",new HOJA(a, null, null, "hoja"),b,"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a ALFABETO:b               {:RESULT = new HOJA("|",a , new HOJA(b, null, null, "hoja"),"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a EXPRESION:b              {:RESULT = new HOJA("|",a , b,"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  MAS ALFABETO:a                              {:RESULT = new HOJA("+",new HOJA(a, null, null, "hoja"),null,"+");System.out.println("simbolo + izquierda:"+a);:}
 |  MAS EXPRESIONM:a                            {:RESULT = new HOJA("+",a,null,"+");System.out.println("simbolo + izquierda:"+a);:}
 |  INTERR ALFABETO:a                           {:RESULT = new HOJA("?",new HOJA(a, null, null, "hoja"),null,"?");System.out.println("simbolo ? izquierda:"+a);:}
 |  INTERR EXPRESIONM:a                         {:RESULT = new HOJA("?",a,null,"?");System.out.println("simbolo ? izquierda:"+a);:}
;

EXPRESIONM::=
    PT ALFABETO:a EXPRESION:b                   {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"), b,".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a ALFABETO:b                   {:RESULT = new HOJA(".", a, new HOJA(b, null, null, "hoja"),".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT ALFABETO:a ALFABETO:b                    {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"), new HOJA(b, null, null, "hoja"),".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a EXPRESION:b                  {:RESULT = new HOJA(".", a, b,".");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a ALFABETO:b                {:RESULT = new HOJA("|",new HOJA(a, null, null, "hoja"), new HOJA(b, null, null, "hoja"),"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a EXPRESION:b               {:RESULT = new HOJA("|",new HOJA(a, null, null, "hoja"), b,"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a ALFABETO:b               {:RESULT = new HOJA("|", a, new HOJA(b, null, null, "hoja"),"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a EXPRESION:b              {:RESULT = new HOJA("|", a, b,"|");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
;

ENTRADA::=
    NOMBRE:a DOSPT  PARRAF:b  PTCOMA {:if(LIST_AFD.get(a)!=null){String[] data = {a,b.substring(1, b.length()-1)}; Validacion.add(data);}:}
 |  ENTRADA NOMBRE:a DOSPT  PARRAF:b  PTCOMA {:if(LIST_AFD.get(a)!=null){String[] data = {a,b.substring(1, b.length()-1)}; Validacion.add(data);}:}
;

ALFABETO::=

 ESPECIAL:a                             {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  PARRAF:a                            {:RESULT = a.substring(1, a.length()-1); System.out.println("Alfabeto: "+a);:}
 |  ESPACIO:a                           {:RESULT = a.substring(1, a.length()-1); System.out.println("Alfabeto: "+a);:}
 |  LLAVEIZ NOMBRE:a LLAVEDER           {:RESULT = a; if(CONJ_EXP.get(a)==null){ if(CONJ.get(a)!=null){CONJ_EXP.put(a,CONJ.get(a));}else{System.out.println("no existe el conunto");}}else{System.out.println("CONJ_EXP repetido");} System.out.println("Alfabeto: "+a);:}
;

CARACTER::=
    LETRA:a                     {:RESULT = a;:}
|   SIGNO:a                     {:RESULT = a;:}
|   DIGITO:a                    {:RESULT = a;:}
;


NOMBRE::=
    LETRA:a                  {:RESULT = a;:}
|   LETRA:a NOMBRE2:b        {:RESULT = a+b;:}
;

NOMBRE2::=
    CARACTER:a              {:RESULT = a;:}
|   CARACTER:a NOMBRE2:b    {:RESULT = a+b;:}
;

NOTACION::=
    CARACTER:a SEP CARACTER:b   {:RESULT =a+"~"+b; System.out.println("NOTACION: "+a+"~"+b);:}
 |  NOTACION2:a                 {:RESULT =a; System.out.println("NOTACION: "+a);:}
;

NOTACION2::=
    CARACTER:a                         {:RESULT = a;:}
 |  CARACTER:a COMA NOTACION2:b        {:RESULT = a+","+b;:}
;