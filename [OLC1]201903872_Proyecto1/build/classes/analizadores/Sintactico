package analizadores; 
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.HOJA;
import Estructuras.AFD;

parser code 
{:
    public Map<String, String> CONJ = new HashMap<>();
    public Map<String, String> EXP_REG = new HashMap<>();
    public Map<String, AFD> LIST_AFD = new HashMap<>();

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    
    public Map<String, AFD> getAFD(){
        return LIST_AFD;
    }
:} 

terminal String PTCOMA,PARIZQ,PARDER,CORIZQ,CORDER, LLAVEIZ, LLAVEDER, MENOR, MAYOR, COMA;
terminal String CONCATE, DISYUN, INTERR, MAS, GUION, POR, DIAGONAL, SEP, PT, COMILLA;
terminal String ESPECIAL;
terminal String FIN, ESPC;
terminal String TLD;
terminal String COMBA;
terminal String CONJ;
terminal String COMBC;
terminal String COML;
terminal String DOSPT;
terminal String LETRA;
terminal String ESPACIO;
terminal String SIGNO;
terminal String DIGITO;

non terminal ini;
non terminal Operaciones;
non terminal Operacion;
non terminal String ALFABETO;
non terminal String PARRAFO;
non terminal String NOMBRE;
non terminal String NOMBRE2;
non terminal HOJA EXPRESION;
non terminal HOJA EXPRESIONM;
non terminal String ENTRADA;
non terminal String CARACTER;
non terminal String NOTACION;
non terminal String NOTACION2;

precedence left MAS, POR, PT, INTERR, DISYUN;

start with ini; 

ini::= 
    LLAVEIZ Operaciones FIN FIN ENTRADA LLAVEDER
 |  LLAVEIZ Operaciones FIN FIN LLAVEDER
 |  error FIN
;

Operaciones ::=
   Operacion Operaciones
 | Operacion 
 | error Operaciones
 
; 

Operacion ::=
    CONJ DOSPT NOMBRE:a GUION MENOR NOTACION:b PTCOMA     {:System.out.println("Conjunto: "+a+" con notación: "+b+" fue creado con exito" );:}
 |  NOMBRE:a GUION MENOR EXPRESION:b PTCOMA               {:LIST_AFD.put(a,new AFD(new HOJA(".", b , new HOJA("#", null, null, "hoja"), "operador"))); System.out.println("Expresion: "+a+" con la notación: "+b+" fue creada con exito");:}
 |  error PTCOMA
;

EXPRESION::=
    POR ALFABETO:a                              {:RESULT = new HOJA("*",new HOJA(a, null, null, "hoja"),null,"operador");System.out.println("simbolo * izquierda:"+a);:}
 |  POR EXPRESIONM:a                            {:RESULT = new HOJA("*", a ,null,"operador");System.out.println("simbolo * izquierda:"+a);:}
 |  PT ALFABETO:a EXPRESION:b                   {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"),b,"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a ALFABETO:b                   {:RESULT = new HOJA(".",a,new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT ALFABETO:a ALFABETO:b                    {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"),new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a EXPRESION:b                  {:RESULT = new HOJA(".", a, b,"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a ALFABETO:b                {:RESULT = new HOJA("|",new HOJA(a, null, null, "hoja"),new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a EXPRESION:b               {:RESULT = new HOJA("|",new HOJA(a, null, null, "hoja"),b,"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a ALFABETO:b               {:RESULT = new HOJA("|",a , new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a EXPRESION:b              {:RESULT = new HOJA("|",a , b,"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  MAS ALFABETO:a                              {:RESULT = new HOJA("+",new HOJA(a, null, null, "hoja"),null,"operador");System.out.println("simbolo + izquierda:"+a);:}
 |  MAS EXPRESIONM:a                            {:RESULT = new HOJA("+",a,null,"operador");System.out.println("simbolo + izquierda:"+a);:}
 |  INTERR ALFABETO:a                           {:RESULT = new HOJA("?",new HOJA(a, null, null, "hoja"),null,"operador");System.out.println("simbolo ? izquierda:"+a);:}
 |  INTERR EXPRESIONM:a                         {:RESULT = new HOJA("?",a,null,"operador");System.out.println("simbolo ? izquierda:"+a);:}
;

EXPRESIONM::=
    PT ALFABETO:a EXPRESION:b                   {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"), b,"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a ALFABETO:b                   {:RESULT = new HOJA(".", a, new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT ALFABETO:a ALFABETO:b                    {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"), new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  PT EXPRESION:a EXPRESION:b                  {:RESULT = new HOJA(".", a, b,"operador");System.out.println("simbolo: PT izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a ALFABETO:b                {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"), new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN ALFABETO:a EXPRESION:b               {:RESULT = new HOJA(".",new HOJA(a, null, null, "hoja"), b,"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a ALFABETO:b               {:RESULT = new HOJA(".", a, new HOJA(b, null, null, "hoja"),"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
 |  DISYUN EXPRESION:a EXPRESION:b              {:RESULT = new HOJA(".", a, b,"operador");System.out.println("simbolo: DISYUN izquierda:"+a+" derecha: "+b);:}
;

ENTRADA::=
    NOMBRE:a DOSPT COMILLA PARRAFO:b COMILLA PTCOMA {:System.out.println("La expresión: \""+b+"\" es valida con la expresión Regular "+a);:}
 |  NOMBRE:a DOSPT COMILLA PARRAFO:b COMILLA PTCOMA ENTRADA {:System.out.println("La expresión: \""+b+"\" es valida con la expresión Regular "+a);:}
;

ALFABETO::=
    COMILLA CARACTER:a COMILLA          {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  COMILLA PT:a COMILLA                {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  COMILLA MAS:a COMILLA               {:RESULT = a; System.out.println("Alfabeto: "+a);:} 
 |  COMILLA POR:a COMILLA               {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  COMILLA INTERR:a COMILLA            {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  COMILLA DISYUN:a COMILLA            {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  COMILLA MENOR:a COMILLA            {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  COMILLA GUION:a COMILLA            {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  ESPECIAL:a                          {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  ESPACIO:a                           {:RESULT = a; System.out.println("Alfabeto: "+a);:}
 |  LLAVEIZ NOMBRE:a LLAVEDER           {:RESULT = "{"+a+"}"; System.out.println("Alfabeto: "+a);:}
;

PARRAFO::=
    ESPECIAL:a                  {:RESULT = a; System.out.println("PARRAFO: "+a);:}
 |  CARACTER:a                  {:RESULT = a; System.out.println("PARRAFO: "+a);:}
 |  CARACTER:a PARRAFO:b        {:RESULT = a+b; System.out.println("PARRAFO: "+a+b);:}
 |  GUION:a PARRAFO:b           {:RESULT = a+b; System.out.println("PARRAFO: "+a+b);:}
 |  ESPECIAL:a PARRAFO:b         {:RESULT = a+b; System.out.println("PARRAFO: "+a+b);:}
;

CARACTER::=
    LETRA:a                     {:RESULT = a;:}
|   SIGNO:a                     {:RESULT = a;:}
|   DIGITO:a                    {:RESULT = a;:}
;


NOMBRE::=
    LETRA:a                  {:RESULT = a;:}
|   LETRA:a NOMBRE2:b        {:RESULT = a+b;:}
;

NOMBRE2::=
    CARACTER:a              {:RESULT = a;:}
|   CARACTER:a NOMBRE2:b    {:RESULT = a+b;:}
;

NOTACION::=
    CARACTER:a SEP CARACTER:b   {:RESULT =a+"~"+b; System.out.println("NOTACION: "+a+"~"+b);:}
 |  NOTACION2:a                 {:RESULT =a; System.out.println("NOTACION: "+a);:}
;

NOTACION2::=
    CARACTER:a                         {:RESULT = a;:}
 |  CARACTER:a COMA NOTACION2:b        {:RESULT = a+" , "+b;:}
;